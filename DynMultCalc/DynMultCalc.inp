###
### private functions
###

function string lag_parent_name (const bundle series_info)
    if series_info.transform == "lags"
        return series_info.parent
    else
        return ""
    endif
end function

function bundle base_vars (const bundle b, string xvarname[null])

    bundle ret = defbundle("yname", b.depvar)
    strings xnames = array(0)
    bundles serinfo = array(0)
    X = b.xlist

    if !exists(xvarname)
        xvarname = ""
    endif

    # create an array of info bundles first
    loop foreach i X
        bundle xi = getinfo(X.$i)
        serinfo += xi
        if xvarname == xi.name || xvarname == lag_parent_name(xi)
            ret.sdx = sd(X.$i)
        endif
    endloop

    scalar k = nelem(serinfo)

    # create an array of names
    loop i = 1 .. k
        sb = serinfo[i]
        s = lag_parent_name(sb)
        if s == ""
            s = sb.name
        endif
        found = instrings(xnames, s)
        if rows(found) == 0
            xnames += s
        endif
    endloop

    # add the string array to the return bundle
    ret.xnames = xnames

    # now record the lags and their position and add the
    # appropriate matrices to the return bundle

    loop j = 1 .. nelem(xnames)
        string sn = xnames[j]
        matrix l = {}
        loop i = 1 .. k
            sb = serinfo[i]
            if sn == lag_parent_name(sb)
                l |= {sb.lag, i}
            elif sn == sb.name
                l |= {0, i}
            endif
        endloop
        ret[sn] = msortby(l, 1)
    endloop

    return ret
end function

function matrix LongRunMultiplier(const matrix coeff,
                                  const matrix vcv,
                                  const matrix asel,
                                  const matrix bsel)

    scalar MArep = nelem(bsel) == 0
    scalar p0 = nelem(asel) == 0

    scalar den = p0 ? 1 : 1 - sum(coeff[asel])
    scalar cf = MArep ? 1 / den : sum(coeff[bsel]) / den

    # Jacobian term
    matrix J = zeros(1, nelem(coeff))
    if !p0
        J[asel] = cf/den
    endif
    if !MArep
        J[bsel] = 1/den
    endif

    scalar se = sqrt(qform(J, vcv))

    return {cf, se}
end function

function scalar mean_lag(const matrix avec,
                         const matrix bvec)
    sb = sum(bvec)
    sa = 1 - sum(avec)
    p = rows(avec)
    q = rows(bvec) - 1

    if p > 0
        sda = -seq(1, p) * avec
    else
        sda = 0
    endif
    if q > 0
        sdb = seq(1, rows(bvec)-1) * bvec[2:]
    else
        sdb = 0
    endif

    ret = sdb/sb - sda/sa
    return ret
end function

function string periods_string (int pd)
    if pd == 4
        return "quarters"
    elif pd == 12
        return "months"
    elif contains(pd, {5,6,7})
        return "days"
    else
        return "periods"
    endif
end function

function void irf_plot (const bundle b,
                        scalar conflev[0.1:0.99:0.95],
                        string ofile[null])
    if !b.cumulate
        funcerr "response must be cumulated"
    endif
    m = b.mult
    plt = (b.sdx * m[,1]) ~ seq(0, rows(m) - 1)'
    bandwidth = invcdf(z, 1 - (1-conflev)/2)
    band = b.sdx * (m[,1] ~ bandwidth * m[,2])
    if exists(ofile)
        targ = sprintf("\"%s\"", ofile)
    else
        targ = "display"
    endif
    plot plt
        option with-lines
        options band=band band-style=fill,grey
        printf "set title 'Response to one-std dev permanent shock in %s'", b.xname
        printf "set ylabel '%s'", b.yname
        literal set xlabel "Horizon"
    end plot --output=@targ
end function

function scalar DynMultCalc_precheck (void)
    if $command != "ols"
        return 1
    elif inbundle($model, "ldepvar") || inbundle($model, "maxlag")
        return 0
    else
        return 1
    endif
end function

function list DynMultCalc_listmaker (void)
    /* assemble the list of regressors from which the user
       can make a selection
    */
    bundle m = $model
    list X = m.xlist
    list L = null
    loop foreach i X
        bundle xi = getinfo(X.$i)
        string lpn = lag_parent_name(xi)
        string s = lpn == "" ? xi.name : lpn
        if s == "const" || s == "time" || s == m.depvar
            continue
        endif
        if !inlist(L, s)
            if lpn != ""
                string sp = sprintf("%d", xi.parent_id)
                L = L @sp
            else
                L += X.$i
            endif
        endif
    endloop
    return L
end function

###
### public functions
###

function void multi_plot (const bundle b,
                          bool cumulate[0],
                          scalar conflev[0.1:0.99:0.95],
                          string ofile[null])
    matrix m = cumulate ? b.cum_mult : b.dyn_mult
    plt = m[,1] ~ seq(0, rows(m) - 1)'
    bandwidth = invcdf(z, 1 - (1-conflev)/2)
    band = m[,1] ~ bandwidth * m[,2]

    if exists(ofile)
        targ = sprintf("\"%s\"", ofile)
    else
        targ = "display"
    endif
    
    if cumulate
        mstr = "Cumulated multipliers"
    else
        mstr = "Dynamic multipliers"
    endif

    plot plt
        option with-lines
        options band=band band-style=fill,grey
        printf "set title '%s %s <- %s'", mstr, b.yname, b.xname
        literal set ylabel "Multiplier"
        literal set xlabel "Horizon"
    end plot --output=@targ
end function

function void multi_print (const bundle b, bool allLRMs[0])

    string to_from = sprintf("%s <- %s", b.yname, b.xname)

    if !allLRMs
        if b.q > 0
            printf "ADL(%d,%d) model\n", b.p, b.q
            printf "Multipliers %s\n", to_from
        else
            printf "Autoregressive model of order %d\n", b.p
            printf "MA representation"
            printf "\n"
        endif

        m = b.LRM
        modprint m "Long-run"
        if ok(b.meanlag)
            printf "Mean lag = %5.2f %s\n\n", b.meanlag, periods_string($pd)
        endif
    endif

    if allLRMs
        printf "Dynamic (interim) multipliers %s\n", to_from
    else
        printf "Dynamic (interim) multipliers\n"
    endif
    m = b.dyn_mult
    k = rows(m)
    strings pn = array(k+1)
    loop i = 0 .. k
        pn[i+1] = sprintf("%s_%02d", b.xname, i)
    endloop
    modprint m pn

    if allLRMs
        printf "Cumulated multipliers %s\n", to_from
    else
        printf "Cumulated multipliers\n"
    endif
    m = b.cum_mult
    modprint m pn
end function

function bundle multipliers (const bundle model,
                             string xvarname,
                             int horizon[1::18])

    MArep = xvarname == (model.depvar) # special case

    bundle varinfo = base_vars(model, xvarname)
    strings names = varinfo.xnames
    string yname = varinfo.yname
    bundle ret = _(yname=yname, xname=xvarname)
    ret.sdx = MArep ? model.sigma : varinfo.sdx

    pos = instrings(names, xvarname)
    if rows(pos) == 0
        return null
    endif

    matrix coeff = model.coeff

    if inbundle(varinfo, yname)
        # autoregressive terms
        matrix a = varinfo[yname]
        matrix ylags = a[,1]
        scalar p = maxc(ylags)
        ret.ylags = ylags
        ret.p = p
        matrix avec = zeros(p, 1)
        matrix sela = a[,2]
        matrix avec[ylags] = coeff[sela]
    else
        ret.p = 0
        ylags = {}
        matrix sela = {}
        matrix avec = {0}
    endif

    # distributed lags
    if MArep
        # special case: here we compute the response to a unit shock
        # in the disturbance
        matrix bvec = 1
        xlags = 0
        ret.q = 0
        ret.xlags = xlags
        selb = {}
    else
        b = varinfo[xvarname]
        matrix xlags = b[,1]
        scalar q = maxc(xlags)
        ret.xlags = xlags
        ret.q = q
        matrix bvec = zeros(q+1, 1)
        matrix selb = b[,2]
        bvec[xlags + 1] = coeff[selb]
    endif

    ret.LRM = LongRunMultiplier(coeff, model.vcv, sela, selb)

    if ret.p == 0
        horizon = ret.q
    endif

    # dynamic multipliers
    shock = 1 | zeros(horizon, 1)
    dyn_mult = filter(shock, bvec, avec)
    Ja = fdjac(avec, "filter(shock, bvec, avec)")
    if MArep
        J = Ja[, ylags]
        sel = sela
    else
        Jb = fdjac(bvec, "filter(shock, bvec, avec)")
        if ret.p > 0
            J = Ja[, ylags] ~ Jb[, xlags + 1]
            sel = sela | selb
        else
            J = Jb[, xlags + 1]
            sel = selb
        endif
    endif
    V = model.vcv[sel, sel]
    V = qform(J, V)
    dyn_mult = dyn_mult ~ sqrt(diag(V))
    ret.dyn_mult = dyn_mult

    # cumulated multipliers
    shock = ones(horizon+1,1)
    cum_mult = filter(shock, bvec, avec)
    Ja = fdjac(avec, "filter(shock, bvec, avec)")
    if MArep
        J = Ja[, ylags]
        sel = sela
    else
        Jb = fdjac(bvec, "filter(shock, bvec, avec)")
        if ret.p > 0
            J = Ja[, ylags] ~ Jb[, xlags + 1]
            sel = sela | selb
        else
            J = Jb[, xlags + 1]
            sel = selb
        endif
    endif
    V = model.vcv[sel, sel]
    V = qform(J, V)
    cum_mult = cum_mult ~ sqrt(diag(V))
    ret.cum_mult = cum_mult

    # mean lag
    chkvec = sgn(dyn_mult[,1])
    s = contains({-1; 1}, chkvec)
    if min(s) == 0  # sign constancy except for zeros
        ret.meanlag = mean_lag(avec, bvec)
    else
        ret.meanlag = NA
    endif

    return ret
end function

function bundle long_run_effects (const bundle model, bool CLI[1])
    bundle varinfo = base_vars(model)
    strings xnames = varinfo.xnames
    string yname = varinfo.yname
    matrix coeff = model.coeff

    if inbundle(varinfo, yname)
        a = varinfo[yname]
        matrix ylags = a[,1]
        scalar p = maxc(ylags)
        matrix avec = zeros(p, 1)
        matrix sela = a[,2]
        matrix avec[ylags] = coeff[sela]
    else
        scalar p = 0
        sela = {}
        avec = {0}
    endif

    if inlist(model.xlist, 0)
        xnames = xnames[-1]
    endif
    matrix v = instrings(xnames, yname)
    if nelem(v) > 0
        xnames = xnames[-v]
    endif
    matrix v = instrings(xnames, "time")
    if nelem(v) > 0
        xnames = xnames[-v]
    endif

    scalar nx = nelem(xnames)
    matrix LRMs = zeros(nx, 2)
    matrix meanlags = zeros(nx, 1)

    loop i=1..nx
        b = varinfo[xnames[i]]
        matrix xlags = b[,1]
        scalar q = maxc(xlags)
        matrix bvec = zeros(q+1, 1)
        matrix selb = b[,2]
        bvec[xlags + 1] = coeff[selb]
        LRMs[i,] = LongRunMultiplier(coeff, model.vcv, sela, selb)
        scalar ml = mean_lag(avec, bvec)
        meanlags[i] = ml <= 0 ? NA : ml
    endloop

    rnameset(LRMs, xnames)
    rnameset(meanlags, xnames)
    bundle ret = _(LRMs, meanlags)

    if CLI
        # if in CLI mode, we need a little more for pretty-printing
        ret.yname = yname
        ret.pdstr = periods_string($pd)
    endif

    return ret
end function

function void GUI_DynMultCalc_plot (bundle *b, int ptype[0:1:0] \
                                    "Plot type" {"Dynamic", "Cumulated"},
                                    scalar conf[0.5:0.99:0.95:0.01])
    multi_plot(b, ptype, conf)
end function

function void long_run_print (const bundle blr)
    matrix LRMs = blr.LRMs
    printf "Long-run effects on %s, all exogenous regressors\n", blr.yname
    modprint LRMs
    if rows(LRMs) > 1
        printf "Mean lags (%s):\n\n", blr.pdstr
        print blr.meanlags
    elif ok(blr.meanlags[1])
        printf "Mean lag: %g %s\n\n", blr.meanlags[1], blr.pdstr
    endif
end function

function bundle GUI_DynMultCalc (int xvar[$mylist] \
                                 "Regressor for detailed treatment",
                                 int horizon[1::18] "Horizon",
                                 scalar conf[0.5:0.99:0.95:0.01] \
                                 "Confidence level, for plots")

    xvarname = varname(xvar)
    bundle blr = long_run_effects($model, 0)
    bundle bm = multipliers($model, xvarname, horizon)
    bundle ret = blr + bm

    printf "ADL(%d,%d) model\n\n", bm.p, bm.q
    matrix LRMs = blr.LRMs
    nx = rows(LRMs)
    if nx > 1
        printf "Long-run effects on %s, all exogenous regressors\n", $model.depvar
    else
        printf "Long-run effect of %s on %s\n", xvarname, $model.depvar
    endif
    modprint LRMs
    if nx > 1
        printf "Mean lags (%s):\n\n", periods_string($pd)
        print blr.meanlags
    elif ok(blr.meanlags[1])
        printf "Mean lag: %g %s\n\n", blr.meanlags[1], periods_string($pd)
    endif
    multi_print(bm, 1)
    ret.conf = conf
    return ret
end function
